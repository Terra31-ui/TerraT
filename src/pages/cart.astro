<!DOCTYPE html>
---
import Layout from '../components/Layout.astro';
---

<Layout title="Your Cart">
  <header class="flex justify-center bg-white shadow-lg p-4 mb-8 rounded-lg mt-20 sm:mt-40">
    <div class="flex flex-col sm:flex-row justify-center items-center gap-2 sm:gap-4">
      <a href="/" aria-label="Go to homepage">
        <img src="/favicon.svg" alt="TerraTAC Logo" class="h-10 w-10 md:h-12 md:w-12 hover:scale-105 transition-transform duration-200 cursor-pointer" style="min-width:2rem; min-height:2rem;" />
      </a>
      <h1 class="text-2xl sm:text-3xl font-bold text-center">Forgot Something?</h1>
      <a href="/" class="mt-2 sm:mt-0 bg-blue-600 text-white px-4 py-2 rounded-lg font-semibold hover:bg-blue-700 transition-colors text-base shadow">Jump Back In</a>
    </div>
  </header>
  <section class="max-w-3xl mx-auto py-12 px-4">
    <h1 class="text-3xl font-bold mb-6">Selections</h1>
    <div id="cart-items" class="mb-6 text-gray-700"></div>
    <form id="payment-form">
      <div id="payment-element" class="mb-6"></div>
      <!-- No native input fields here, but if you add any, ensure they have unique id and name attributes. -->
      <!-- Stripe injects its own fields, but we ensure no duplicate ids/names in our markup -->
      <button
        class="bg-green-600 text-white px-6 py-2 rounded shadow hover:bg-green-700 transition"
        type="submit"
        name="submit-payment"
        aria-label="Pay Now"
      >
        Pay Now
      </button>
      <div id="payment-message" class="mt-4 text-red-600" aria-live="polite"></div>
    </form>
    <button
      class="bg-red-600 text-white px-6 py-2 rounded shadow hover:bg-red-700 transition ml-4"
      id="clear-cart-btn"
    >
      Clear Cart
    </button>

    <!-- Stripe Climate Badge -->
    <div class="flex items-center gap-2 mt-8">
      <img src="/stripe-climate-badge.svg" alt="Stripe Climate Badge" class="h-8 w-auto" />
      <span class="text-green-700 font-semibold">
        We support permanent carbon removal with <a href="https://stripe.com/climate" target="_blank" class="underline text-green-800">Stripe Climate</a>
      </span>
    </div>
  </section>
  <script src="https://js.stripe.com/v3/"></script>
  <script is:inline>
    // Render cart items
    function renderCart() {
      const cart = JSON.parse(localStorage.getItem('cart')) || [];
      const container = document.getElementById('cart-items');
      // Debug: show cart JSON (removed for production)
      // const debugCart = `<pre class='bg-gray-100 text-xs p-2 rounded mb-2'>Cart JSON: ${JSON.stringify(cart, null, 2)}</pre>`;
      // Static mapping for id -> {name, img}
      const productMap = {
        "hi-vis-vest": { name: "Hi-Vis Vest", img: "/products/hi-vis-vest.png" },
        "tac-hoodie": { name: "Tactical Hoodie", img: "/products/tac-hoodie.png" },
        "basic-boots": { name: "Covert Boots", img: "/products/basic-boots.png" },
        "tac-trousers": { name: "TAC Trousers", img: "/products/tac-trousers.png" },
        "tac-mid-layer": { name: "TAC Mid-Layer", img: "/products/tac-mid-layer.png" },
        "tac-gloves": { name: "Team TAC Gloves", img: "/products/tac-gloves.png" },
        "field-boots": { name: "Field Boots", img: "/products/field-boots.png" },
        "elite-tac-boots": { name: "TAC Elite Boots", img: "/products/elite-tac-boots.png" },
        "pro-tac-jacket": { name: "TAC Jacket", img: "/products/pro-tac-jacket.png" },
        "pro-tac-gloves": { name: "TAC Gloves", img: "/products/pro-tac-gloves.png" },
        "value-tac-gloves": { name: "Entry TAC Gloves", img: "/products/value-tac-gloves.png" },
        "stab-vest": { name: "Stab Vest", img: "/products/stab-vest.png" },
        "multi-tool": { name: "Multi-Tool", img: "/products/multi-tool.png" },
        "tactical-pen": { name: "Tactical Defense Pen", img: "/products/tactical-pen.png" },
        "survival-knife": { name: "Survival Tactical Knife", img: "/products/survival-knife.png" },
        "pro-multi-tool": { name: "TAC Multi-Tool", img: "/products/pro-multi-tool.png" },
        "basic-field-knife": { name: "Field Knife", img: "/products/basic-field-knife.png" },
        "personal-security-spray": { name: "Personal Security Spray", img: "/products/personal-security-spray.png" },
        "tac-headlamp": { name: "TAC Headlamp", img: "/products/tac-headlamp.png" },
        "compact-backpack": { name: "Compact Tactical Backpack", img: "/products/compact-backpack.png" },
        "night-vision": { name: "Night Vision", img: "/products/night-vision.png" },
        "ballistic-helmet": { name: "TAC Ballistic Helmet", img: "/products/ballistic-helmet.png" },
        "tac-rangefinder": { name: "TAC Rangefinder", img: "/products/tac-rangefinder.png" },
        "tac-thermal-scope": { name: "TAC Thermal Scope", img: "/products/tac-thermal-scope.png" },
        "starter-backpack": { name: "Covert Backpack", img: "/products/starter-backpack.png" }
      };
      // Check for payment success in URL
      const params = new URLSearchParams(window.location.search);
      if (cart.length === 0) {
        if (params.get('payment_status') === 'success') {
          container.innerHTML = '<div class="bg-green-100 text-green-800 p-4 rounded mb-4 font-semibold text-lg">Thank you for your purchase!</div>';
        } else {
          container.innerHTML = '<p>Your cart is empty.</p>';
        }
        return;
      }
      container.innerHTML = cart.map((item, idx) => {
        let name = item.name;
        let img = '';
        if (productMap[item.id]) {
          if (!name) name = productMap[item.id].name;
          img = productMap[item.id].img;
        }
        return `<div class="mb-4 flex items-center gap-4">${img ? `<img src="${img}" alt="${name || item.id}" class="h-16 w-16 object-contain rounded shadow" />` : ''}
          <span class="text-xl font-bold">${name || item.id}</span>
          <button class="bg-gray-200 px-2 py-1 rounded text-lg font-bold hover:bg-gray-300" data-action="decrement" data-idx="${idx}" aria-label="Decrease quantity">−</button>
          <span class="text-lg min-w-[2ch] text-center">${item.qty}</span>
          <button class="bg-gray-200 px-2 py-1 rounded text-lg font-bold hover:bg-gray-300" data-action="increment" data-idx="${idx}" aria-label="Increase quantity">+</button>
          <span class="text-lg">${item.price || ''}</span>
        </div>`;
      }).join('');
      // Use event delegation for increment/decrement buttons
      container.onclick = function(e) {
        const btn = e.target.closest('button[data-action]');
        if (!btn) return;
        const idx = parseInt(btn.getAttribute('data-idx'));
        const action = btn.getAttribute('data-action');
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        if (cart[idx]) {
          if (action === 'increment') {
            cart[idx].qty = (cart[idx].qty || 1) + 1;
          } else if (action === 'decrement') {
            cart[idx].qty = (cart[idx].qty || 1) - 1;
            if (cart[idx].qty < 1) {
              cart.splice(idx, 1);
            }
          }
          localStorage.setItem('cart', JSON.stringify(cart));
          window.dispatchEvent(new CustomEvent('cartUpdated'));
        }
      };
    }
    document.addEventListener('DOMContentLoaded', renderCart);
    window.addEventListener('cartUpdated', renderCart);

    // Stripe Payment Element integration
    let stripe, elements;
    async function initializeStripe() {
      const cart = JSON.parse(localStorage.getItem('cart')) || [];
      const paymentContainer = document.getElementById('payment-element');
      const paymentMsg = document.getElementById('payment-message');
      if (cart.length === 0) {
        paymentContainer.innerHTML = '';
        paymentMsg.textContent = '';
        return;
      }
      // Validate cart items for price
      const invalidItem = cart.find(item => !item.price || isNaN(parseFloat(item.price.replace('£', ''))));
      if (invalidItem) {
        paymentMsg.textContent = `Error: Cart item "${invalidItem.name || invalidItem.id}" is missing a valid price.`;
        paymentContainer.innerHTML = '';
        return;
      }
      let data;
      try {
        const endpoint = location.hostname === 'localhost' ? '/api/create-checkout' : '/.netlify/functions/create-checkout';
        console.log('Fetching', endpoint, 'with cart:', cart);
        const res = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items: cart }),
        });
        data = await res.json();
        console.log('API /api/create-checkout response:', data);
      } catch (fetchErr) {
        paymentMsg.innerHTML = `<span>Network or server error: ${fetchErr.message}</span>`;
        paymentContainer.innerHTML = '';
        console.log('Network or server error:', fetchErr);
        return;
      }
      const { clientSecret, publishableKey, error } = data || {};
      // Debug: show API response
      paymentMsg.innerHTML = error ? `<span>${error}</span><br><pre class='bg-gray-100 text-xs p-2 rounded'>API Response: ${JSON.stringify(data, null, 2)}</pre>` : '';
      if (!clientSecret || !publishableKey) {
        paymentMsg.innerHTML += `<br><span>Missing Stripe credentials. API response:</span><br><pre class='bg-gray-100 text-xs p-2 rounded'>${JSON.stringify(data, null, 2)}</pre>`;
        paymentContainer.innerHTML = '';
        console.log('Missing Stripe credentials:', data);
        return;
      }
      if (error) {
        paymentContainer.innerHTML = '';
        return;
      }
      try {
        stripe = Stripe(publishableKey);
        elements = stripe.elements({ clientSecret });
        paymentContainer.innerHTML = '';
        const paymentElement = elements.create('payment');
        paymentElement.mount('#payment-element');
        console.log('Stripe Payment Element mounted.');
      } catch (stripeErr) {
        paymentMsg.innerHTML = `<span>Stripe.js error: ${stripeErr.message}</span>`;
        paymentContainer.innerHTML = '';
        console.log('Stripe.js error:', stripeErr);
      }
    }
    document.addEventListener('DOMContentLoaded', () => {
      // Show payment success if redirected
      const params = new URLSearchParams(window.location.search);
      if (params.get('payment_status') === 'success') {
        document.getElementById('payment-message').textContent = 'Payment successful!';
        localStorage.removeItem('cart');
        window.dispatchEvent(new CustomEvent('cartUpdated'));
      }
      initializeStripe();
    });
    window.addEventListener('cartUpdated', initializeStripe);

    document.getElementById('payment-form').onsubmit = async (e) => {
      alert('Payment form submitted!');
      console.log('Stripe payment form submitted');
      e.preventDefault();
      const msg = document.getElementById('payment-message');
      msg.textContent = '';
      // Show loading spinner
      msg.innerHTML = '<span class="animate-spin inline-block mr-2">⏳</span>Processing payment...';
      if (!stripe || !elements) {
        msg.textContent = 'Stripe or elements not ready. Please wait for payment form to load.';
        console.log('Stripe or elements not ready', { stripe, elements });
        return;
      }
      try {
        console.log('Calling stripe.confirmPayment...');
        const result = await stripe.confirmPayment({
          elements,
          confirmParams: {
            return_url: window.location.href.split('?')[0] + '?payment_status=success',
          },
          redirect: 'always',
        });
        console.log('stripe.confirmPayment result:', result);
        const { error, paymentIntent } = result || {};
        if (error) {
          msg.innerHTML = `<span>Payment failed: ${error.message}</span><br><pre class='bg-gray-100 text-xs p-2 rounded'>${JSON.stringify(error, null, 2)}</pre>`;
        } else if (paymentIntent && paymentIntent.status === 'succeeded') {
          msg.textContent = 'Payment successful!';
          localStorage.removeItem('cart');
          window.dispatchEvent(new CustomEvent('cartUpdated'));
        } else if (paymentIntent) {
          msg.innerHTML = `<span>Payment status: ${paymentIntent.status}</span><br><pre class='bg-gray-100 text-xs p-2 rounded'>${JSON.stringify(paymentIntent, null, 2)}</pre>`;
        } else {
          msg.innerHTML = `<span>Unknown payment result. See console for details.</span><br><pre class='bg-gray-100 text-xs p-2 rounded'>${JSON.stringify(result, null, 2)}</pre>`;
        }
      } catch (err) {
        msg.innerHTML = `<span>Unexpected error: ${err.message || err}</span><br><pre class='bg-gray-100 text-xs p-2 rounded'>${JSON.stringify(err, null, 2)}</pre>`;
        console.log('Unexpected error in payment submission:', err);
      }
      // Fallback: if nothing happens after 5 seconds, show error
      setTimeout(() => {
        if (msg.innerHTML.includes('Processing payment')) {
          msg.innerHTML = '<span class="text-red-600">Payment did not proceed. Please check your connection or try again.</span>';
        }
      }, 5000);
    };
    // Extra fallback: prevent default on Pay Now button click
    // Remove extra preventDefault on Pay Now button (it can block form submission)

    // Fallback: ensure the payment form handler is always attached
    function attachPaymentFormHandler() {
      const form = document.getElementById('payment-form');
      if (!form) return;
      // Remove any previous handler to avoid duplicates
      form.removeEventListener('submit', window._paymentFormHandler, false);
      window._paymentFormHandler = async function(e) {
        alert('Payment form submitted!');
        console.log('Stripe payment form submitted');
        e.preventDefault();
        const msg = document.getElementById('payment-message');
        msg.textContent = '';
        // Show loading spinner
        msg.innerHTML = '<span class="animate-spin inline-block mr-2">⏳</span>Processing payment...';
        if (!stripe || !elements) {
          msg.textContent = 'Stripe or elements not ready. Please wait for payment form to load.';
          console.log('Stripe or elements not ready', { stripe, elements });
          return;
        }
        try {
          console.log('Calling stripe.confirmPayment...');
          const { error, paymentIntent } = await stripe.confirmPayment({
            elements,
            confirmParams: {
              return_url: window.location.href.split('?')[0] + '?payment_status=success',
            },
            redirect: 'always',
          });
          console.log('stripe.confirmPayment result:', { error, paymentIntent });
          if (error) {
            msg.textContent = 'Payment failed: ' + error.message;
          } else if (paymentIntent && paymentIntent.status === 'succeeded') {
            msg.textContent = 'Payment successful!';
            localStorage.removeItem('cart');
            window.dispatchEvent(new CustomEvent('cartUpdated'));
          } else {
            msg.textContent = 'Payment submitted. Please check your email for confirmation.';
          }
        } catch (err) {
          msg.textContent = 'Unexpected error: ' + (err.message || err);
          console.log('Unexpected error in payment submission:', err);
        }
        // Fallback: if nothing happens after 5 seconds, show error
        setTimeout(() => {
          if (msg.innerHTML.includes('Processing payment')) {
            msg.innerHTML = '<span class="text-red-600">Payment did not proceed. Please check your connection or try again.</span>';
          }
        }, 5000);
      };
      form.addEventListener('submit', window._paymentFormHandler, false);
      console.log('Payment form handler attached');
    }
    document.addEventListener('DOMContentLoaded', attachPaymentFormHandler);
    window.addEventListener('cartUpdated', attachPaymentFormHandler);

    // Clear cart
    document.getElementById('clear-cart-btn').onclick = () => {
      localStorage.removeItem('cart');
      window.dispatchEvent(new CustomEvent('cartUpdated'));
      renderCart();
      const paymentContainer = document.getElementById('payment-element');
      const paymentMsg = document.getElementById('payment-message');
      if (paymentContainer) paymentContainer.innerHTML = '';
      if (paymentMsg) paymentMsg.textContent = '';
      alert('Cart cleared!');
    };
  </script>
 </Layout>
<script src="/cart.js" is:inline></script>